@startuml
participant c1 as "client 1"
participant s as "server"
participant c2 as "client 2"

group client 1: open("foo.txt")

  note left of c1 #white
    We create a new file handle
    and register it on a server.
    (We could also postpone it
    until we actually share the
    file handle).
  end note

  c1 -> s: req_up("file:123", shared, 0)
  s -> c1: up("file:123", shared, 0)
  activate c1
end

group client 1: fork

  c1 --> c2 ** : fork

  note right of c2 #white
    We have forked. The second client
    will refer to the file handle by
    the same key.
  end note

  c2 -> s: req_up("file:123", shared)
  s -> c2: up("file:123", shared)
  activate c2
end

group client 1: write("foo.txt"); client 2: write("foo.txt")

  note left of c1 #white
    Both clients need to lock the
    file in exclusive mode in order
    to write (so that we properly
    update the position).

    Note that a read operation
    would also require a lock.
  end note

  rnote over c1: write...

  c1 -> s: req_up("file:123", exclusive)
  deactivate c1
  s -> c2: req_down("file:123")
  c2 -> s: down("file: 123", 0)
  deactivate c2

  rnote over c2: write...

  c2 -> s: req_up("file:123", exclusive)

  s -> c1: up("file:123", exclusive, 0)
  activate c1 #ffbbbb

  s -> c1: req_down("file:123")

  rnote over c1: ...write ends

  c1 -> s: down("file:123", 64)
  deactivate c1

  note left of c1 #white
    Once the write is finished, we can
    release the exclusive handle (with
    updated position), as requested by
    "req_down".
  end note
  s -> c2: up("file:123", exclusive, 64)
  activate c2 #ffbbbb

  rnote over c2: ...write ends
end

group client 2: write("foo.txt")
  note right of c2 #white
    If a client performs additional
    uncontested writes, there is no
    need to call the server again.
  end note
end
@enduml
